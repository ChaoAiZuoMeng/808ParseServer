package com.chaokong.service.impl;

import com.chaokong.pojo.CalibrationData;
import com.chaokong.service.IParseCalibrationService;
import com.chaokong.tool.MyBuffer;
import com.chaokong.tool.Tools;
import com.chaokong.util.Kafka;
import org.apache.kafka.common.serialization.ByteArraySerializer;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import java.util.ArrayList;

@Service
public class ParseCalibrationServiceImpl implements IParseCalibrationService {

	private static Logger calibrationLog = Logger.getLogger("calibrationLog");

	/**
	 * 解析出上传标定文件的数据(HexString) 生成透传内容的数据内容(byte[])
	 *
	 * @param caliHex
	 * @return
	 */
	public CalibrationData parseCalibrationData(String caliHex) {

		calibrationLog.info("接收到标定数据==" + caliHex);
		String[] split = caliHex.split(":");
		String simNo = split[0];
		String messageContent = split[1];
		messageContent = messageContent.replace(",", "");
		messageContent = messageContent.replace("\n", "");
		messageContent = messageContent.replace("\\", "");
		messageContent = messageContent.replace(" ", "");
		byte[] bytes = Tools.HexString2Bytes(messageContent);

		MyBuffer myBuffer = new MyBuffer(bytes);
		// 车牌号[12]
		byte[] car_no = myBuffer.gets(12);
		// 额定载重[4]
		int zaizhong_eding = myBuffer.getInt();
		// 分度值[2]
		short aShort = myBuffer.getShort();
		// 传感器个数[1]
		byte no_sensor = myBuffer.get();
		// 单传感器记录数[2]
		short log_single = myBuffer.getShort();
		// 标定数据集合体
		ArrayList<byte[]> logs = new ArrayList<>();
		int i1 = (no_sensor + 1) * 2;
		for (int i = log_single; i > 0; i--) {
			byte[] gets = myBuffer.gets(i1);
			logs.add(gets);
		}
		// CRC32校验码[4]
		int anInt = myBuffer.getInt();
		MyBuffer buff = new MyBuffer(20 + logs.size() * ((byte[]) logs.get(0)).length * 2);
		buff.put(10);
		buff.put(zaizhong_eding * 100);
		buff.put(no_sensor + 0);
		buff.put(log_single);
		buff.put(new byte[]{0, 0, 0, 0, 0, 0});
		for (byte[] log : logs) {
			buff.put(new byte[]{0, 0});
			buff.put(log[log.length - 2]);
			buff.put(log[log.length - 1]);
			for (int i = 0; i < log.length - 2; i += 2) {
				buff.put(new byte[]{0, 0});
				buff.put(log[i]);
				buff.put(log[i + 1]);
			}
		}
		buff.getBuff().reset();
		CalibrationData caliData = new CalibrationData();
		caliData.setSimNo(simNo);
		caliData.setCaliDataBuf(buff.gets(buff.getlength()));
		return caliData;
	}

	public static void main(String[] args) {
		String caliHex = "016594900137:e88b8f422d54455354320000000086c400640600f25bf35a01649d5d1175e2608d00005be259f0645e5cc9743d5eee00645bd159e064205c8172995d5000c85bc159d063e25c3a70f45bb2012c5bb059bf63a35bf26f505a1401905ba059af63655baa6dab587601f45b8f599f63275b636c0756d802585b7f598f62e85b1b6a63553a02bc5b6e597e62aa5ad468be539b03205b5e596e626c5a8c671a51fd03845b4d595e622d5a446575505f03e85b3d594e61ef59fd63d14ec1044c5b2c593d61b159b5622d4d2304b05b1c592d6173596e60884b8505145b0b591d613459265ee449e705785afa590c60f658de5d3f484905dc5aea58fc60b858975b9b46aa06405ad958ec6079584f59f7450c06a45ac958dc603b58085852436e07085ab858cb5ffd57c056ae41d0076c5aa858bb5fbe57785509403207d05a9758ab5f80573153653e9408345a87589b5f4256e951c13cf608985a76588a5f0456a2501c3b5808fc5a66587a5ec5565a4e7839b909605a55586a5e8756124cd3381b09c45a4558595e4955cb4b2f367d0a285a3458495e0a5583498b34df0a8c5a2458395dcc553c47e633410af05a1358295d8e54f4464231a30b545a0258185d4f54ac449d30050bb859f258085d11546542f92e660c1c59e157f85cd3541d41552cc80c8059d157e85c9453d63fb02b2a0ce459c057d75c56538e3e0c298c0d4859b057c75c1853463c6727ee0dac599f57b75bda52ff3ac326500e10598f57a75b9b52b7391f24b20e74597e57965b5d5270377a23140ed8596e57865b1f522835d621750f3c595d57765ae051e034311fd70fa0594d57655aa25199328d1e391004593c57555a64515130e91c9b1068592b57455a25510a2f441afd10cc591b573559e750c22da0195f1130590a572459a9507a2bfb17c1119458fa5714596b50332a57177011f858e95704592c4feb28b31770125c58d956f458ee4fa3270e177012c058c856e358b04f5c256a1770132458b856d358714f1423c51770138858a756c358334ecd2221177013ec589756b257f54e85207d17701450588656a257b64e3d1ed8177014b45876569257784df61d341770151858655682573a4dae1b8f1770157c5855567156fc4d6719eb177015e05844566156bd4d1f18471770164458335651567f4cd71770177016a85823564156414c9017701770170c5812563056024c481770177017705802562055c44c011770177017d457f1561055864bb917701770183857e155ff55474b7117701770189c57d055ef55094b2a17701770190057c055df54cb4ae217701770196457af55cf548c4a9b1770177019c8579f55be544e4a53177017701a2c578e55ae54104a0b177017701a90577e559e53d249c4177017701af4576d558e5393497c177017701b58575c557d53554935177017701bbc574c556d531748ed177017701c20573b555d52d848a5177017701c84572b554d529a485e177017701ce8571a553c525c4816177017701d4c570a552c521d47cf177017701db056f9551c51df4787177017701e1456e9550b51a1473f177017701e7856d854fb516346f8177017701edc56c854eb512446b0177017701f4056b754db50e64669177017701fa456a754ca50a84621177017702008569654ba506945d917701770206c568654aa502b45921770177020d05675549a4fed454a177017702134566454894fae4503177017702198565454794f7044bb1770177021fc564354694f324473177017702260563354584ef4442c1770177022c4562254484eb543e4177017702328561254384e77439d17701770238c560154284e3943551770177023f055f154174dfa430d17701770245455e054074dbc42c61770177024b855d053f74d7e427e17701770251c55bf53e74d3f423617701770258055af53d64d0141ef1770177025e4559e53c64cc341a7177017702648558d53b64c8441601770177026ac557d53a64c464118177017702710556c53954c0840d0177017702774555c53854bca40891770177027d8554b53754b8b404117701770283c553b53644b4d3ffa1770177028a0552a53544b0f3fb2177017702904551a53444ad03f6a177017702968550953344a923f231770177029cc54f953234a543edb177017702a3054e853134a153e94177017702a9454d8530349d73e4c177017702af854c752f349993e04177017702b5c54b752e2495b3dbd177017702bc054a652d2491c3d75177017702c24549552c248de3d2e177017702c88548552b148a03ce6177017702cec547452a148613c9e177017702d505464529148233c57177017702db45453528147e53c0f177017702e185443527047a63bc8177017702e7c5432526047683b80177017702ee054225250472a3b38177017702f445411524046ec3af1177017702fa85401522f46ad3aa917701770300c53f0521f466f3a6217701770307053e0520f46313a1a1770177030d453cf51fe45f239d217701770313853be51ee45b4398b17701770319c53ae51de45763943177017703200539d51ce453738fc177017703264538d51bd44f938b41770177032c8537c51ad44bb386c17701770332c536c519d447c3825177017703390535b518d443e37dd1770177033f4534b517c44003796177017703458533a516c43c2374e1770177034bc532a515c438337061770177035205319514c434536bf1770177035845309513b430736771770177035e852f8512b42c8362f17701770364c52e8511b428a35e81770177036b052d7510a424c35a017701770371452c650fa420d355917701770377852b650ea41cf35111770177037dc52a550da419134c9177017703840529550c9415334821770177038a4528450b94114343a177017703908527450a940d633f317701770396c52635099409833ab1770177039d05253508840593363177017703a3452425078401b331c177017703a98523250683fdd32d4177017703afc522150573f9e328d177017703b60521150473f603245177017703bc4520050373f2231fd177017703c2851ef50273ee431b6177017703c8c51df50163ea5316e177017703cf051ce50063e673127177017703d5451be4ff63e2930df177017703db851ad4fe63dea3097177017703e1c519d4fd53dac3050177017703e80518c4fc53d6e3008177017703ee4517c4fb53d2f2fc1177017703f48516b4fa43cf12f79177017703fac515b4f943cb32f31177017704010514a4f843c742eea177017704074513a4f743c362ea21770177040d851294f633bf82e5b17701770413c51194f533bba2e131770177041a051084f433b7b2dcb17701770420450f74f333b3d2d8417701770426850e74f223aff2d3c1770177042cc50d64f123ac02cf517701770433050c64f023a822cad17701770439450b54ef23a442c651770177043f850a54ee13a052c1e17701770445c50944ed139c72bd61770177044c050844ec139892b8f17701770452450734eb0394b2b4717701770458850634ea0390c2aff1770177045ec50524e9038ce2ab817701770465050424e8038902a701770177046b450314e6f38512a2917701770471850204e5f381329e117701770477c50104e4f37d529991770177047e04fff4e3f379629521770177048444fef4e2e3758290a1770177048a84fde4e1e371a28c217701770490c4fce4e0e36db287b1770177049704fbd4dfd369d28331770177049d44fad4ded365f27ec177017704a384f9c4ddd362127a4177017704a9c4f8c4dcd35e2275c177017704b004f7b4dbc35a42715177017704b644f6b4dac356626cd177017704bc84f5a4d9c35272686177017704c2c4f4a4d8c34e9263e177017704c904f394d7b34ab25f6177017704cf44f284d6b346c25af177017704d584f184d5b342e2567177017704dbc4f074d4b33f02520177017704e204ef74d3a33b224d8177017704e844ee64d2a33732490177017704ee84ed64d1a33352449177017704f4c4ec54d0932f72401177017704fb04eb54cf932b823ba1770177050144ea44ce9327a23721770177050784e944cd9323c232a1770177050dc4e834cc831fd22e31770177051404e734cb831bf229b1770177051a44e624ca8318122541770177052084e514c983143220c17701770526c4e414c87310421c41770177052d04e304c7730c6217d1770177053344e204c67308821351770177053984e0f4c56304920ee1770177053fc4dff4c46300b20a61770177054604dee4c362fcd205e1770177054c44dde4c262f8e20171770177055284dcd4c152f501fcf17701770558c4dbd4c052f121f881770177055f04dac4bf52ed31f401770177056544d9c4be52e951ef81770177056b84d8b4bd42e571eb117701770571c4d7b4bc42e191e691770177057804d6a4bb42dda1e221770177057e44d594ba32d9c1dda1770177058484d494b932d5e1d921770177058ac4d384b832d1f1d4b1770177059104d284b732ce11d031770177059744d174b622ca31cbb1770177059d84d074b522c641c74177017705a3c4cf64b422c261c2c177017705aa04ce64b322be81be5177017705b044cd54b212baa1b9d177017705b684cc54b112b6b1b55177017705bcc4cb44b012b2d1b0e177017705c304ca44af12aef1ac6177017705c944c934ae02ab01a7f177017705cf84c824ad02a721a37177017705d5c4c724ac02a3419ef177017705dc04c614aaf29f519a8177017705e244e9583fb";
		ParseCalibrationServiceImpl pcs = new ParseCalibrationServiceImpl();
		CalibrationData calibrationData = pcs.parseCalibrationData(caliHex);
		System.err.println("simNo: " + calibrationData.getSimNo());
		System.err.println("data: " + Tools.bytes2hex(calibrationData.getCaliDataBuf()));
		String simNo = calibrationData.getSimNo();
		byte[] caliDataBuf = calibrationData.getCaliDataBuf();
//		Kafka.producerSendMessage(caliDataBuf, "caliDataDown", ByteArraySerializer.class.getName(), simNo);
	}
}
